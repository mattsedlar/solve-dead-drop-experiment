prob3=calculate.probs(game1,3),
prob4=calculate.probs(game1,4),
prob5=calculate.probs(game1,5),
deaddrop=game1$drop)
set.seed(50)
simulations <- replicate(50,simulate.game())
x <- 1
while(x <= 50){
game.results <- rbind(game.results,c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
game.results$predictor <- apply(game.results,1,function(x) which(x==max(x)))
?unlist
game.results <- game.results %>% transform(predictor=as.vector(predictor))
View(game.results)
class(game.results$predictor[1])
game.results <- game.results %>% transform(predictor=predictor-1)
game.results$predictor[1] -1
unlist(game.results$predictor)
test <- unlist(game.results$predictor)
test
test$1
test[1]
test[2]
rm(test)
game.results <- data.frame(prob0=calculate.probs(game1,0),
prob1=calculate.probs(game1,1),
prob2=calculate.probs(game1,2),
prob3=calculate.probs(game1,3),
prob4=calculate.probs(game1,4),
prob5=calculate.probs(game1,5),
deaddrop=game1$drop)
set.seed(50)
simulations <- replicate(50,simulate.game())
x <- 1
while(x <= 50){
game.results <- rbind(game.results,c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
game.results$predictor <- apply(game.results,1,function(x) which(x==max(x)))
game.results$predictor[1]
test <- function(x) {
temp <- unlist(x)
temp <- temp - 1
final <- ""
for(i in temp) {
paste(final,temp[i],sep = ",")
}
}
transform(game.results, predictor==test(predictor))
temp <- unlist(game.results$predictor[1])
temp
temp -1
temp <- temp -1
temp
test <- function(x) {
temp <- unlist(x)
temp - 1
final <- ""
for(i in temp) {
paste(final,temp[i],sep = ",")
}
}
transform(game.results, predictor==test(predictor))
test <- function(x) {
temp <- unlist(x)
temp <- temp - 1
final <- ""
for(i in temp) {
paste(final,temp[i],sep = ",")
}
}
transform(game.results, predictor==test(predictor))
temp
test <- function(x) {
x <- unlist(x)
x <- x - 1
final <- ""
for(i in temp) {
paste(final,temp[i],sep = ",")
}
}
transform(game.results, predictor==test(predictor))
test <- function(x) {
x <- unlist(x)
x <- x - 1
#final <- ""
#for(i in temp) {
# paste(final,temp[i],sep = ",")
#}
x
}
transform(game.results, predictor==test(predictor))
test <- function(x) {
x <- unlist(x)
x <- x - 1
final <- ""
for(i in x) {
paste(final,x[i],sep = ",")
}
}
transform(game.results, predictor==test(predictor))
as.numeric(temp)
as.character(temp)
test <- function(x) {
x <- unlist(x)
x <- x - 1
x <- as.character(x)
for(i in x) {
paste(x[i],sep = ",")
}
}
transform(game.results, predictor==test(predictor))
temp <- unlist(game.results$predictor[1]) - 1
temp
test <- function(x) {
x <- unlist(x)- 1
x <- as.character(x)
for(i in x) {
paste(x[i],sep = ",")
}
}
transform(game.results, predictor==test(predictor))
test <- function(x) {
x <- as.character(unlist(x)- 1)
for(i in x) {
paste(x[i],sep = ",")
}
}
transform(game.results, predictor==test(predictor))
game.results <- data.frame(prob0=calculate.probs(game1,0),
prob1=calculate.probs(game1,1),
prob2=calculate.probs(game1,2),
prob3=calculate.probs(game1,3),
prob4=calculate.probs(game1,4),
prob5=calculate.probs(game1,5),
deaddrop=game1$drop)
set.seed(50)
simulations <- replicate(50,simulate.game())
x <- 1
while(x <= 50){
game.results <- rbind(game.results,c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
game.results$predictor <- colnames(game.results)[apply(game.results,1,which.max)]
game.results <- data.frame(prob0=calculate.probs(game1,0),
prob1=calculate.probs(game1,1),
prob2=calculate.probs(game1,2),
prob3=calculate.probs(game1,3),
prob4=calculate.probs(game1,4),
prob5=calculate.probs(game1,5),
deaddrop=game1$drop)
set.seed(50)
simulations <- replicate(50,simulate.game())
x <- 1
while(x <= 50){
game.results <- rbind(game.results,c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
game.results$predictor <- apply(game.results,1,function(x) which(x==max(x)))
game.results$predicted <- sapply(game.results$predictor, %in%, game.results$deaddrop)
game.results$predicted <- sapply(game.results$predictor, %in%, x=game.results$deaddrop)
game.results$deaddrop[1] %in% game.results$predictor[1]
game.results$predicted <- which(sapply(game.results$predictor, %in%, x=game.results$deaddrop))
which(game.results$predictor[1] %in% game.results$deaddrop[1])
game.results$predictor[1] %in% game.results$deaddrop[1]
game.results$predictor[1] %in% game.results$deaddrop[1] - 1
game.results$predictor[1] %in% (game.results$deaddrop[1] + 1)
(game.results$deaddrop[1] + 1) %in% game.results$predictor[1]
list <- list(1,2,3,4)
y <- 4
y %in% list
list <- game.results$predictor[1]
y <- game.results$deaddrop[1] + 1
y %in% list
list
y
class(list)
class(list[1])
list[1]
list[0]
list[2]
list[3]
list
list$0
list[`0`]
list
list[1]
list[[1]]
list[[1]][1]
deaddrop.predicted <- function(x,y) {
x %in% y[[1]]
}
deaddrop.predicted <- function(x,y) {
(x + 1) %in% y[[1]]
}
sapply(game.results$predictor,deaddrop.predicted,game.results$deaddrop)
deaddrop.predicted <- function(x,y) {
(y + 1) %in% x[[1]]
}
sapply(game.results$predictor,deaddrop.predicted,game.results$deaddrop)
apply(game.results$predictor,1,deaddrop.predicted,game.results$deaddrop)
for(i in game.results$predictor) {
deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i])
}
deaddrop.predicted(game.results$predictor[1],game.results$deaddrop[1])
predicted <- c()
for(i in game.results$predictor) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
}
predicted
predicted <- c()
for(i in game.results$predictor) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
break;
}
any(game.results$deaddrop[1] == game.results$predictor[1])
deaddrop.predicted(game.results$predictor[1],game.results$deaddrop[1])
length(game.results$predictor)
predicted <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
break;
}
predicted <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
}
predicted
game.results$predicted <- predicted
table(game.results$predicted)
game.results <- data.frame(prob0=calculate.probs(game1,0),
prob1=calculate.probs(game1,1),
prob2=calculate.probs(game1,2),
prob3=calculate.probs(game1,3),
prob4=calculate.probs(game1,4),
prob5=calculate.probs(game1,5),
deaddrop=game1$drop)
set.seed(50)
simulations <- replicate(99,simulate.game())
x <- 1
while(x <= 99){
game.results <- rbind(game.results,c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
game.results$predictor <- apply(game.results,1,function(x) which(x==max(x)))
deaddrop.predicted <- function(x,y) {
(y + 1) %in% x[[1]]
}
predicted <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
}
game.results$predicted <- predicted
table(game.results$predicted)
game.results$random <- sample(full.deck,100)
set.seed(50)
game.results$random <- sample(full.deck,100, replace=T)
library(dplyr)
game.results <- game.results %>% mutate(randompredicted = (deaddrop == random))
table(game.results$randompredicted)
table(full.deck)
library(knitr)
kable(table(full.deck))
kable(full.deck)
deck.table <- table(full.deck)
deck.table
colnames(deck.table)
colnames(deck.table) <- c(0,1,2,3,4,5)
summary(full.deck)
deck.matrix <- matrix(c(4,3,2,2,1,1), ncol=6, byrow=T)
colnames(deck.matrix) <- c(0:5)
factorial(3)/factorial(1)
choose(3,2)
factorial(3)/(factorial(1)*factorial(2))
choose(12,6)
factorial(12)/(factorial(6)*factorial(6))
table(game.results)
set.seed(50)
simulations <- replicate(99,simulate.game())
x <- 1
while(x <= 99){
game.results <- rbind(game.results,c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
# Looking at whether dead drop is included in predictions
game.results$predictor <- apply(game.results,1,function(x) which(x==max(x)))
game.results <- data.frame(prob0=calculate.probs(game1,0),
prob1=calculate.probs(game1,1),
prob2=calculate.probs(game1,2),
prob3=calculate.probs(game1,3),
prob4=calculate.probs(game1,4),
prob5=calculate.probs(game1,5),
deaddrop=game1$drop)
set.seed(50)
simulations <- replicate(99,simulate.game())
x <- 1
while(x <= 99){
game.results <- rbind(game.results,c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
game.results$predictor <- apply(game.results,1,function(x) which(x==max(x)))
game.results$predictor[4]
game.results$predictor[[4]]
game.results$predictor[[4]] == game.results$deaddrop[4]
game.results$predictor[[4]][1] == game.results$deaddrop[4]
game.results$predictor[[9]][1] == game.results$deaddrop[9]
game.results$predictor[[9]][1] == game.results$deaddrop[9] + 1
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
deaddrop.true <- function(x,y) {
x == y + 1
}
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
true
length(game.results$predictor[[1]])
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
print(FALSE)
} else {
x[1] == y + 1
}
}
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
true
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
print(FALSE)
} else {
print(x[1] == y + 1)
}
}
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
FALSE
} else {
x[1] == y + 1
}
}
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
true
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[i],game.results$deaddrop[i]))
}
game.results$predictor[1]
length(game.results$predictor[1])
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
FALSE
} else {
x[1] == y + 1
}
}
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
predicted <- c()
true <- c()
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
FALSE
} else {
x[1] == y + 1
}
}
eaddrop.true <- function(x,y) {
if(length(x) > 1) {
FALSE
} else {
TRUE
}
}
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
FALSE
} else {
TRUE
}
}
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
FALSE
} else if(x[1]==y+1) {
TRUE
}
}
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
true
predicted
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
FALSE
} else if(x[1]==y+1) {
TRUE
} else { FALSE }
}
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
game.results$predicted <- predicted
game.results$trueprediction <- true
table(game.results$trueprediction)
set.seed(50)
game.results$random <- sample(full.deck,100, replace=T)
library(dplyr)
game.results <- game.results %>% mutate(randompredicted = (deaddrop == random))
table(game.results$randompredicted)
game1$drop
game1$player2[1]
4/7
2/7
calculate.probs(game1,3)
updated.game1 <- matrix(c(2/6,2/6,1/6,1/6,0,0), ncol=6, byrow=T)
updated.game1
1/5
2/5
1/5
game1$player2
game1$player3
game.results
if(!file.exists("data/")) { dir.create(
"data/"
)}
write.csv(game.results, "data/100-game-results.csv")
write.csv(game.results,"data/")
write.csv(game.results,"data/100-game-results.csv")
head(game.results)
game.results[-8]
write.csv(game.results[-8],"data/100-game-results.csv")
